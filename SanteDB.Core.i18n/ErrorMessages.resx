<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AMBIGUOUS_DATA_REFERENCE" xml:space="preserve">
    <value>Multiple records returned where one expected</value>
  </data>
  <data name="ARGUMENT_INCOMPATIBLE_TYPE" xml:space="preserve">
    <value>Argument type {0} is not assignable from {1}</value>
  </data>
  <data name="ARGUMENT_INVALID_TYPE" xml:space="preserve">
    <value>Expected argument of type {0} but got {1}</value>
  </data>
  <data name="ARGUMENT_NULL" xml:space="preserve">
    <value>Required argument was null</value>
  </data>
  <data name="ARGUMENT_OUT_OF_RANGE" xml:space="preserve">
    <value>Value {0} was not expected (allowed values: {1})</value>
  </data>
  <data name="BUNDLE_PERSISTENCE_ERROR" xml:space="preserve">
    <value>Error inserting transaction bundle (#{0}) - {1}</value>
  </data>
  <data name="CANNOT_INITIALIZE_APPLICATION" xml:space="preserve">
    <value>Cannot initialize the service host context - fatal startup error.</value>
  </data>
  <data name="CERTIFICATE_NOT_VALID" xml:space="preserve">
    <value>Certificate is not valid for use in this context</value>
  </data>
  <data name="COMMUNICATION_RESPONSE_FAILURE" xml:space="preserve">
    <value>Error parsing response message</value>
  </data>
  <data name="DATA_STRUCTURE_NOT_APPROPRIATE" xml:space="preserve">
    <value>Data structure is not appropriate for {0} due to {1}</value>
  </data>
  <data name="DEPENDENT_CONFIGURATION_MISSING" xml:space="preserve">
    <value>This service relies on the presence of a configuration for {0}</value>
  </data>
  <data name="DEPENDENT_PROPERTY_NULL" xml:space="preserve">
    <value>Dependent property {0} was null</value>
  </data>
  <data name="DUPLICATE_CLASS_CONCEPT" xml:space="preserve">
    <value>Class key {0} on {1} is already registered</value>
  </data>
  <data name="ERROR_PROVIDING_FAULT" xml:space="preserve">
    <value>Error providing fault message</value>
  </data>
  <data name="FIELD_NOT_FOUND" xml:space="preserve">
    <value>Field {0} not found in the requested type</value>
  </data>
  <data name="INVALID_CLASS_CODE" xml:space="preserve">
    <value>Classification code is not valid on this type</value>
  </data>
  <data name="INVALID_EXPRESSION_TYPE" xml:space="preserve">
    <value>Invalid expression type. Expected {0} but was given {1}</value>
  </data>
  <data name="MAIL_CANNOT_MOVE_OWNERS" xml:space="preserve">
    <value>Mail messages cannot be moved between mailboxes belonging to different users</value>
  </data>
  <data name="MAIL_ERROR_SENDING" xml:space="preserve">
    <value>There was a general error sending mail via the persistence repository</value>
  </data>
  <data name="MAIL_MISISNG_TO" xml:space="preserve">
    <value>Sending mail requires the To field to be populated</value>
  </data>
  <data name="MAP_EXPRESSION_NOT_POSSIBLE" xml:space="preserve">
    <value>Failure mapping expression to/from underlying domain models. Ensure the property paths are correct</value>
  </data>
  <data name="MAP_INCOMPATIBLE_TYPE" xml:space="preserve">
    <value>Types {0} and {1} are incompatible</value>
  </data>
  <data name="MAP_INVALID_TYPE" xml:space="preserve">
    <value>Expected instance of {0}</value>
  </data>
  <data name="MAP_NOT_FOUND" xml:space="preserve">
    <value>Cannot find a configured map between {0} and {1}</value>
  </data>
  <data name="METHOD_NOT_FOUND" xml:space="preserve">
    <value>Required method {0} not found</value>
  </data>
  <data name="MULTIPLE_CALLS_NOT_ALLOWED" xml:space="preserve">
    <value>Multiple calls to {0} are not supported</value>
  </data>
  <data name="NOT_INITIALIZED" xml:space="preserve">
    <value>This class has not been initialized</value>
  </data>
  <data name="NOT_SUPPORTED" xml:space="preserve">
    <value>The implementation of this method is not supported on this object</value>
  </data>
  <data name="NOT_SUPPORTED_IMPLEMENTATION" xml:space="preserve">
    <value>The provided object must implement {0} to support this function</value>
  </data>
  <data name="OBJECT_READONLY" xml:space="preserve">
    <value>This object is readonly and cannot be modified or saved</value>
  </data>
  <data name="RELATED_OBJECT_NOT_AVAILABLE" xml:space="preserve">
    <value>No persistence service has been registered with source of {1} and target of {0}</value>
  </data>
  <data name="SEQUENCE_MORE_THAN_ONE" xml:space="preserve">
    <value>Sequence contains more than one element</value>
  </data>
  <data name="SEQUENCE_NO_ELEMENTS" xml:space="preserve">
    <value>Sequence contains no elements</value>
  </data>
  <data name="SERVICE_NOT_FOUND" xml:space="preserve">
    <value>Required service {0} is not found</value>
  </data>
  <data name="SUBSCRIPTION_MISSING_DEFINITION" xml:space="preserve">
    <value>Subscription does not have a server side definition for this provider</value>
  </data>
  <data name="SUBSCRIPTION_NOT_SUPPORTED_RESOURCE" xml:space="preserve">
    <value>Subscription identifies an invalid target. Only {0} are allowed as targets of a subscription. Consider using these as a base type for subscription definition.</value>
  </data>
  <data name="SUBSCRIPTION_NO_DEFINITION_FOR_PROVIDER" xml:space="preserve">
    <value>Subscription does not contain a definition for provider {0}</value>
  </data>
  <data name="SUBSCRIPTION_RESOURCE_NOSTORE" xml:space="preserve">
    <value>Subscription requires persistence service for {0} but none is registered</value>
  </data>
  <data name="TYPE_NOT_FOUND" xml:space="preserve">
    <value>Referenced type {0} not available</value>
  </data>
  <data name="WOULD_RESULT_INVALID_STATE" xml:space="preserve">
    <value>Calling {0} would result in an invalid state for this object</value>
  </data>
</root>